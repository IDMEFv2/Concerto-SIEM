input {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    client_id         => "collected_ruled"
    group_id         => "collected_ruled"
    topics            => ["${TOPIC_COLLECTED}_analyzed"]
    codec             => json
  }
}

filter {
  ruby {
    path          => "/usr/share/logstash/config/scripts/match.rb"
    script_params => { "rules" => "/usr/share/logstash/config/rulesets/*.yml" }
  }

  ruby {
    code => "
      # Convert hashes back to lists
      [ '[Ref]', '[Sensor]' ].each do |k|
        v = event.get(k)
        if v.is_a?(Hash) then
          event.set(k, v.values)
        end
      end
    "
  }

  prune {
    whitelist_names => [
      # Top-level IDMEF attributes
      'Version',
      'ID',
      'OrganisationName',
      'OrganisationId',
      'EntityName',
      'EntityId',
      'Category',
      'ext-Category',
      'Cause',
      'Description',
      'Status',
      'Priority',
      'Confidence',
      'Note',
      'CreateTime',
      'StartTime',
      'EndTime',
      'AltNames',
      'AltCategory',
      'Ref',
      'CorrelID',
      'AggrCondition',
      'PredID',
      'RelID',

      # IDMEF classes
      'Analyzer',
      'Sensor',
      'Source',
      'Target',
      'Vector',
      'Attachment'
    ]
  }
}

output {
  kafka {
    bootstrap_servers => "${BOOTSTRAP_SERVER}"
    topic_id => "${TOPIC_COLLECTED}_ruled"
    codec => json
  }
}
